import matplotlib.pyplot as pyplot
import control.matlab as matlab
import numpy as numpy
import math
import colorama as color
from control import feedback

print(color.Style.RESET_ALL)
print(color.Fore.GREEN + '\nВ данной программе исследуется устойчивость автоматической системы управления, состоящей из 3х звеньев и обратной связи.\nПопробуем смоделировать это с использованием библиотеки control, в которой можно задать параметры звеньев и их соединения')
# задаем параметры четвертого звена, то есть УСИЛИТЕЛЯ
K4 = input(color.Fore.YELLOW + '\nПожалуйста, введите коэффициент усиления  усилителя kу: \n')
T4 = input('Пожалуйста, введите постоянную времени усилителя Tу: \n')
# задаем параметры третьего звена, то есть ТУРБИНЫ
K3 = input(color.Fore.BLUE + '\nПожалуйста, введите коэффициент турбины:  \n')
T3 = input('Пожалуйста, введите постоянную времени турбины:  \n')
# задаем параметры третьего звена, то есть ГЕНЕРАТОРА
T2 = input(color.Fore.MAGENTA +'Пожалуйста, введите постоянную времени генератора:  \n')
# задаем параметры ОБРАТНОЙ СВЯЗИ:
K1 = input(color.Fore.CYAN + '\nПожалуйста, введите коэффициент обратной связи ')
K1=float(K1)
K3=float(K3)
K4=float(K4)
T4=float(T4)
T3=float(T3)
T2=float(T2)
# Далее сформируем непосредственно полученные звенья по запрошенным пользователем данным

w1 = matlab.tf([K1], [1])  # это обратная связь
w2 = matlab.tf([1], [T2, 1])  # генератор
w3 = matlab.tf([K3], [T3, 1])  # турбина
w4 = matlab.tf([K4], [T4, 1])  # усилитель
w5 = w2 * w3 * w4
w6 = feedback(w5, w1) #замкнутая система

#Переходная характеристика
[y,x]= matlab.step(w6)
pyplot.plot(x,y)
pyplot.title('Переходная характеристика замкнутой системы')
pyplot.ylabel('Амплитуда')
pyplot.xlabel('Время, сек')
pyplot.grid(True)
pyplot.show()

#импульсная характеристика
[y,x]= matlab.impulse(w6)
pyplot.plot(x,y)
pyplot.title('Импульсная характеристика замкнутой системы')
pyplot.ylabel('Амплитуда')
pyplot.xlabel('Время, сек')
pyplot.grid(True)
pyplot.show()
print('_____________________________________________________________________________________________________________')
#поиск нулей и полюсов будем производить с помощью встроенных функций pole-полюсы и zero-нули
""" Найдем полюса и нули передаточной функции с использованием команд pole, zero"""
print(color.Fore.MAGENTA +'Передаточная функция замкнутой САУ : \n %s'%w6)
print("Полюса: \n %s"%matlab.pole(w6))
print("Нули:\n %s -\n "%matlab.zero(w6))
print('_____________________________________________________________________________________________________________')

#построение корней на плоскости Re,Im
korniCharakteristicheskogoYravneniya = matlab.pzmap(w6)
pyplot.axis([-1,1,-1,1]) #задаем границы графика по осям x и y
pyplot.grid(True)
pyplot.show()

#Далее построим диаграмму Найквеста для разомкнутой САУ
w7=w1*w2*w3*w4 #разомкнутая характеристика
print(color.Fore.CYAN +'Передаточная функция разомкнутой САУ : \n %s'%w7)
pyplot.title('Диаграмма Найквеста ')
pyplot.ylabel('Imaginary Axis')
pyplot.xlabel('Real Axis')
matlab.nyquist(w7)
pyplot.grid(True)
pyplot.plot()
pyplot.show()

#Построим диаграмму Боде - это логарифмические частотные характеристики
mag, phase, omega = matlab.bode(w7, dB=True)
pyplot.grid(True)
pyplot.plot()
pyplot.show()

#Построим годограф Михайлова
from sympy import *
from numpy import arange
import matplotlib.pyplot as plt
w =symbols('w',real=True)
z=-I*T2*T3*T4*w**3-(T2*T3+T3*T4+T2*T4)*w**2+I*(T2+T3+T4)*w+(1+K1*K3*K4)
print(color.Fore.BLUE +"Характеристический многочлен замкнутой системы -n%s"%z)
zr=re(z)
zm=im(z)
#сделаем вывод в командную строку
print("Начальная точка М(%s,%s)"%(zr.subs({w:0}),zm.subs({w:0})))
print("Действительная часть Re= %s"%zr)
print("Мнимая часть Im= %s"%zm)
print('_____________________________________________________________________________________________________________')
x=[zr.subs({w:q}) for q in arange(0,25,0.01)]
y=[zm.subs({w:q}) for q in arange(0,25,0.01)]
pyplot.ylabel('Imaginary Axis')
pyplot.xlabel('Real Axis')
plt.title('Годограф Михайлова')
plt.axis([-20, 20, -20, 20])
plt.plot(x, y)
plt.grid(True)
plt.show()

#Далее будет производить экспериментальное определение коэффициента обратной связи, при котором система теряет устойчивость
#Для определения Коскрит выведем знаменатель Wзамкн в общем виде, а далее сгруппируем члены таким образом, чтобы
#представить это в виде многочлена a0p^3+a1p^2+a2p+a3=0 и выпишем через исходные коэффициенты k1-k4 и T1-T4
#При выводе ручным расчетом для данного варианта (№12, что соответствует паротурбине и жесткой обратной связи), следующие коэффициенты a0-a3
a0=T2*T3*T4
a1=T2*T3+T3*T4+T2*T4
a2=T2+T3+T4
print(color.Fore.YELLOW +'Коэффициенты, полученные при разложении знаменателя на многочлены')
print('\nКоэффициент при p^3 равен: \n', a0)
print('\nКоэффициент при p^2 равен: \n', a1)
print('\nКоэффициент при p равен: \n', a2)
#Произведем поиск критического значения коэффициента обратной связи:(для этого воспользуемся свойством номер 2, определитель матрицы должен быть равен 0)
kOcKriticheskoe=((a1*a2/a0)-1)/(K3*K4)
print(color.Fore.CYAN +'Значение коэффициента обратной связи, при котором система находится на границе устойчивости, равно ', kOcKriticheskoe)